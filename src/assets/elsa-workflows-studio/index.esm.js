import{S as s}from"./p-25ed19bb.js";export{A as ActivityTraits,O as OrderBy,S as SyntaxNames,T as TestWorkFlow,W as WorkflowContextFidelity,a as WorkflowPersistenceBehavior,b as WorkflowStatus,g as getVersionOptionsString}from"./p-25ed19bb.js";import{E as o,H as i}from"./p-f90ae5bc.js";export{E as EventTypes}from"./p-f90ae5bc.js";export{A as ActivityIconProvider,a as activityIconProvider}from"./p-f6467a51.js";export{C as ConfirmDialogService,c as confirmDialogService}from"./p-a91d6039.js";export{P as PropertyDisplayManager,T as ToastNotificationService,p as propertyDisplayManager,t as toastNotificationService}from"./p-83791530.js";export{a as createElsaClient,c as createHttpClient}from"./p-bdae1cb5.js";import{e as r}from"./p-d17a08e5.js";export{e as eventBus}from"./p-d17a08e5.js";export{P as PluginManager,p as pluginManager}from"./p-ad55635c.js";import"./p-a3b5bd35.js";import{h as n}from"./p-4bdcf3f8.js";import{a as f}from"./p-e47f7c7d.js";import"./p-d44d1ddb.js";import"./p-80de33dc.js";class l{constructor(){r.on(o.ActivityDesignDisplaying,this.onActivityDisplaying),r.on(o.DashboardLoadingMenu,this.onLoadingMenu)}onActivityDisplaying(t){const o=t.activityModel;if(!o.type.endsWith("Webhook"))return;const i=(o.properties||[]).find((t=>"Path"==t.name))||{name:"Path",expressions:{Literal:"",syntax:s.Literal}},a=n(i.expressions[i.syntax||s.Literal]);t.bodyDisplay=`<p>${a}</p>`}onLoadingMenu(t){t.data={menuItems:[["webhook-definitions","WebhookDefinitions"]],routes:[["webhook-definitions","elsa-studio-webhook-definitions-list",!0],["webhook-definitions/:id","elsa-studio-webhook-definitions-edit",!1]]}}}let d=null,m=null;class w{constructor(t){this.serverUrl=t.serverUrl,r.on(o.WorkflowRegistryLoadingColumns,this.onLoadingColumns),r.on(o.WorkflowRegistryUpdating,this.onUpdating)}onLoadingColumns(t){t.data={headers:[["Enabled"]],hasContextItems:!0}}async onUpdating(t){const s=await async function(t){if(m)return m;const s=await function(t){if(d)return d;const s={baseURL:t};r.emit(o.HttpClientConfigCreated,this,{config:s});const a=f.create(s),e=new i(a);return r.emit(o.HttpClientCreated,this,{service:e,httpClient:a}),d=a}(t);return m={workflowSettingsApi:{list:async()=>(await s.get("v1/workflow-settings")).data,save:async t=>(await s.post("v1/workflow-settings",t)).data,delete:async t=>{await s.delete(`v1/workflow-settings/${t}`)}}},m}(this.serverUrl),a=(await s.workflowSettingsApi.list()).find((s=>s.workflowBlueprintId==t.params[0]&&s.key==t.params[1]));null!=a&&await s.workflowSettingsApi.delete(a.id);const e={workflowBlueprintId:t.params[0],key:t.params[1],value:t.params[2]};await s.workflowSettingsApi.save(e),await r.emit(o.WorkflowRegistryUpdated,this)}}export{l as WebhooksPlugin,w as WorkflowSettingsPlugin}